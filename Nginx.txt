						---Nginx and Apache---
Perfomance: Nginx		Security: Nginx				Flexibility: Nginx
OS: Apache (+ Windows)		Features and Support: Apache		Request Implementation: Apache

#Базовая архитектура
Apache запускает определенное количество процессов, каждый из которых обрабатывает запрос, не важно картинка это или видео
Nginx обрабатывает асинхронно, что значит, что 1 worker nginx может обрабатывать несколько запросов одновременно. 1 worker per core

Http ---> Server ---> Location

#Испсользование ресурсов
Apache работает со встроенными языка программирования. У Nginx модули серверных языков не должны запускаться каждый раз при получении запроса

#Производительность
Выдает статический контент намного быстрее Apache без обращения к серверу языка. Также он обрабатывает запросы параллельно
Также предоставляет более высокую производительность под высокой нагрузкой
!!! Apache сбрасывает соединения при достижении максимального кол-ва запросов

							#Настройка
apt-get update
apt-get install nginx

							#Добавление в качестве сервиса
wiki.nginx.org/initScripts
cd /etc/init.d/
wget (ссылка на raw-скрипт)

sudo chmod +x nginx
update-rc.d -f nginx defaults

echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" > /etc/default/nginx
echo "DAEMON=/usr/bin/nginx" >> /etc/default/nginx

service nginx start	ИЛИ	systemctl start nginx.service

							#Термины
							Контексты и Директивы

worker_processes 1;					Основной контекст - Мы сообщаем nginx сколько процессов или экземпляров можно запускать (auto)
							Обычно ставится макс. кол-во ядер на сервере. Сколько их? nproc. 
							Какое макс. кол-во соединений для процессора? ulimit -n

events {						Например вот это контекст P.S. events нельзя удалять, иначе конфигурация сломается
  worker_connections 1024;				А вот это директива
  multi_accept on;					Позволяет принимать все новый подключения
  use epoll;			
}							Как много одновременных запросов worker может обрабатывать

http {
  # Mime Types
  # include mime.types;
  include /etc/nginx/mime.types;
  # Add extra mime types
  types {
    application/x-httpd-php .html;
  }
  
  default_type application/octet-stream;
  
  # Basic settings
  charset utf-8;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  types_hash_max_size 2048;
  
  # Enable open file cache				Кэширование файлов. Если на севере огромное количество операций чтения и записи
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_users 2;
  open_file_cache_errors on;
  
  # Configure buffer sizes
  client_body_buffer_size 16k;				Размер буффера пост запроса от клиента. Например для отправки form
  client_header_buffer_size 1k;				Размер буффера заголовков, получаемых от клиента
  client_max_bodt_size 8m;				Максимальный размер тела запроса клиента. Ежели 413
  large_client_header_buffers 2 1k;			Указываем и размер и максимальный размер заголовков больших клиентов.
  
  # Configure Timeouts
  client_body_timeout 12;				Сколько секунд ждать после получения
  client_header_timeout 12;		
  
  # Use a higher keepalive timeout to reduce the need for repeated handshakes
  keepalive_timeout 65;
  
  send_timeout 10;					Через сколько соединение будет закрыто. Неважно что. 
  							Если запрос не выполнен за 10с подключение будет прервано
  
  server {
  
    # Prevent mobile providers modding site
    add_header "Cache-Control" "no-transform";
    
    # The X-Frame-Option header indicates whether a browser should be allowed
    # to render a page within a frame of iframe
    add_header X-Frame-Option SAMEORIGIN;		ifram'ы будут работать только в том случае если они с того же самого домена
    
    # Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000;";
    
    # Inform browser of SPDY availability
    add_header Alternate-Protocol 443:npn-spdy/3;
  
    listen 80;
    server_name localhost;
    
    location / {
      root html;
      index index.html index.htm;
    }
    
    error page 500 502 503 504 /50x.html
    location = /50x.html {
      root html;
    }
  }
}

						======= Создание виртуального хоста =======
ls -l /etc/nginx/
Редактируем nginx.conf
events { }

access_log logs/access.log;
access_log logs/access_notice.log notice;	Директива массива с флагом notice

http {
  include mime.types;

  #types {					Это необязательно указывать, т.к. nginx предусматривает ввод mime.types строчкой на 44
  #  text/html html;
  #  text/css css;
  #}
  
  gzip on;					Стандартная директива on/off

  server {
    listen 80;
    server_name xxx.xxx.xxx.xxx; 		Или домен tdotv.github.io
    root /sites/bootstrap;			Путь к корневой папке с сайтом
    
    access_log logs/access_notice.log main;
    
    #Блоки Location = Перехватчики запросов
    location /home {
      rewrite ^ /index.html;			Директива действия, т.е. по нажатии
    }

    location /greet {				То есть по адресу tdotv.github.io/greet или /greetings или /greet/x
      return 200 'Hello from Nginx block - Matches any prefix';
    }
    
    location = /hello {				Только по адресу tdotv.github.io/hello
      return 200 'Hello from Nginx block - Exact match';
    }
    
    *~ делает нечувствительным к регистру
    ^~ имеет больший приоритет по регистру
    
    location ~ /greet[0-9] {			То есть по адресу tdotv.github.io/greet123
      return 200 'Hello from Nginx block - regex match CASE SENSITIVE';
    }
    
    #К примеру есть папка downloads с флагами. Там есть docs с текстовыми файлами и flags с гифками
    location /downloads {
      #Логирование
      #access.log && error.log
      #http://wiki.nginx.org/CoreModule#error_log
      access_log off;
      error_log = /var/log/nginx/downloads.error.log debug;
      
      root /sites;
      try_files $uri index.html =404;		Директива сначала просит nginx перейти по uri, ежели такой локации нет, то перенаправит на index.html
      						Переменные Nginx: http://nginx.org/en/docs/varindex.html
    }
  }  
}

service nginx reload



						#Работа с backend. Допустим мы создаем папку /files/wordpress с php
user www-data www-data;

events {}

http {
  include /etc/nginx/mime.types;
  
  server {
    listen 80;
    server_name xxx.xxx.xxx.xxx;
    root /sites/wordpress;			Корневая папка - папка с wordpress
    
    index index.php index.html;			Определяем файлы в порядке важности
    
    location / {				Блок location для корневой папки
      try_files $uri $uri/ /index.php?$args;
    }
    
    location ~ \.php$ {				Блок location для файлов .php. !!! php location имеет приоритет над корневой папкой из-за регулярки
      include fastcgi_params;
      include fastcgi.conf;
      
      fastcgi_pass 127.0.0.1:9000;
    }
  }
}











