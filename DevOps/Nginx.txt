						---Nginx and Apache---
Perfomance: Nginx		Security: Nginx				Flexibility: Nginx
OS: Apache (+ Windows)		Features and Support: Apache		Request Implementation: Apache

#Базовая архитектура
Apache запускает определенное количество процессов, каждый из которых обрабатывает запрос, не важно картинка это или видео
Nginx обрабатывает асинхронно, что значит, что 1 worker nginx может обрабатывать несколько запросов одновременно. 1 worker per core

Http ---> Server ---> Location

#Испсользование ресурсов
Apache работает со встроенными языка программирования. У Nginx модули серверных языков не должны запускаться каждый раз при получении запроса

#Производительность
Выдает статический контент намного быстрее Apache без обращения к серверу языка. Также он обрабатывает запросы параллельно
Также предоставляет более высокую производительность под высокой нагрузкой
!!! Apache сбрасывает соединения при достижении максимального кол-ва запросов

							#Добавление в качестве сервиса
wiki.nginx.org/initScripts
cd /etc/init.d/
wget (ссылка на raw-скрипт)

sudo chmod +x nginx
update-rc.d -f nginx defaults

echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" > /etc/default/nginx
echo "DAEMON=/usr/bin/nginx" >> /etc/default/nginx

service nginx start	ИЛИ	systemctl start nginx.service

nginx -t						Проверка синтаксиса

nginx -c *полный путь до конфигурации*			Запуск nginx с определенной конфигурацией

ps aux | grep nginx					Смотрим создался ли процесс nginx

nginx -s reload

							# Термины - Контексты и Директивы							
								# Динамические модули
./configure --help | grep dynamic
load_module "modules/ngx_http_image_filter_module.so"	Естественно нужно указать локацию на которую будет работать данный модуль

apt-get install nginx-plus-module-njs			Установка рипозитория с динамическими модулями
apt-cache search nginx-plus-module			Показать список доступных модулей

worker_processes 1;					Основной контекст - Мы сообщаем nginx сколько процессов или экземпляров можно запускать (auto)
							Обычно ставится макс. кол-во ядер на сервере. Сколько их? nproc. 
							Какое макс. кол-во соединений для процессора? ulimit -n

events {						Например вот это контекст P.S. events нельзя удалять, иначе конфигурация сломается
  worker_connections 1024;				А вот это директива
  multi_accept on;					Позволяет принимать все новый подключения
  use epoll;			
}							Как много одновременных запросов worker может обрабатывать

http {
  # Mime Types
  # include mime.types;
  include /etc/nginx/mime.types;
  # Add extra mime types
  types {
    application/x-httpd-php .html;
  }
  
  default_type application/octet-stream;
  
  # Basic settings
  charset utf-8;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  types_hash_max_size 2048;
  
  # Enable open file cache				Кэширование файлов. Если на севере огромное количество операций чтения и записи
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_users 2;
  open_file_cache_errors on;
  
  # Configure buffer sizes
  client_body_buffer_size 64k;				Размер буффера пост запроса от клиента. Например для отправки form
  client_header_buffer_size 4k;				Размер буффера заголовков, получаемых от клиента
  client_max_bodt_size 8m;				Максимальный размер тела запроса клиента. Ежели 413
  large_client_header_buffers 2 1k;			Указываем и размер и максимальный размер заголовков больших клиентов.
  
  # Configure Timeouts
  client_body_timeout 12;				Сколько секунд ждать после получения
  client_header_timeout 12;		
  
  # Use a higher keepalive timeout to reduce the need for repeated handshakes
  keepalive_timeout 65;
  
  send_timeout 10;					Через сколько соединение будет закрыто. Неважно что. 
  							Если запрос не выполнен за 10с подключение будет прервано
  
  server {
  
    # Prevent mobile providers modding site
    add_header "Cache-Control" "no-transform";
    
    # The X-Frame-Option header indicates whether a browser should be allowed
    # to render a page within a frame of iframe
    add_header X-Frame-Option SAMEORIGIN;		ifram'ы будут работать только в том случае если они с того же самого домена
    
    # Enable HSTS
    add_header Strict-Transport-Security "max-age=31536000;";
    
    # Inform browser of SPDY availability
    add_header Alternate-Protocol 443:npn-spdy/3;
  
    listen 80;
    server_name localhost;
    
    location / {
      root html;
      index index.html index.htm;
    }
    
    error page 500 502 503 504 /50x.html
    location = /50x.html {
      root html;
    }
    
    location = /img/logo.png {
      image_filter resize 300 300;
    }
  }
}

						======= Создание виртуального хоста =======
ls -l /etc/nginx/
Редактируем nginx.conf
events { }

access_log logs/access.log;
access_log logs/access_notice.log notice;	Директива массива с флагом notice

http {
  include mime.types;

  #types {					Это необязательно указывать, т.к. nginx предусматривает ввод mime.types строчкой на 44
  #  text/html html;
  #  text/css css;
  #}
  
  gzip on;					Стандартная директива on/off

  server {
    listen 80;
    server_name xxx.xxx.xxx.xxx; 		Или домен tdotv.github.io
    root /sites/bootstrap;			Путь к корневой папке с сайтом
    
    access_log logs/access_notice.log main;
    
    #Блоки Location = Перехватчики запросов
    location /home {
      rewrite ^ /index.html;			Директива действия, т.е. по нажатии
    }

    location /greet {				То есть по адресу tdotv.github.io/greet или /greetings или /greet/x
      return 200 'Hello from Nginx block - Matches any prefix';
    }
    
    location = /hello {				Только по адресу tdotv.github.io/hello
      return 200 'Hello from Nginx block - Exact match';
    }
    
    *~ делает нечувствительным к регистру
    ^~ имеет больший приоритет по регистру
    
    location ~ /greet[0-9] {			То есть по адресу tdotv.github.io/greet123
      return 200 'Hello from Nginx block - regex match CASE SENSITIVE';
    }
    
    #К примеру есть папка downloads с флагами. Там есть docs с текстовыми файлами и flags с гифками
    location /downloads {
      #Логирование
      #access.log && error.log
      #http://wiki.nginx.org/CoreModule#error_log
      access_log off;
      error_log = /var/log/nginx/downloads.error.log debug;
      
      root /sites;
      try_files $uri index.html =404;		Директива сначала просит nginx перейти по uri, ежели такой локации нет, то перенаправит на index.html
      						Переменные Nginx: http://nginx.org/en/docs/varindex.html
    }
  }  
}

service nginx reload

===================================Работа с backend. Допустим мы создаем папку /files/wordpress с php=============================================
user www-data www-data;

events {}

http {
  include /etc/nginx/mime.types;
  
  server {
    listen 80;
    server_name xxx.xxx.xxx.xxx;
    root /sites/wordpress;			Корневая папка - папка с wordpress
    
    index index.php index.html;			Определяем файлы в порядке важности
    
    location / {				Блок location для корневой папки
      try_files $uri $uri/ /index.php?$args;
    }
    
    location ~ \.php$ {				Блок location для файлов .php. !!! php location имеет приоритет над корневой папкой из-за регулярки
      include fastcgi_params;
      include fastcgi.conf;
      
      fastcgi_pass 127.0.0.1:9000;
    }
  }
}

=================================================================Expires===========================================================================
Уменьшение времени загрузки страницы в браузере
Заголовок говорит браузеру кешировать определенные ресурсы на определенное количество времени. 
При след. загрузке не надо будет заного грузить файлы, что снижает нагрузку на сервер

location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {	Локация статических файлов
  expires 1M;					1 месяц
  access_log off;				Лог доступа для статических файлов обычно вести не нужно
  add_header Pragma public;			То же самое, что и Cache-Control, только он может применяться для старых версий браузеров
  add_header Cache-Control public;		Может кэшировать эти файлы любым способом, применяется для >=HTTP/1.1
  add_header Vary Accept-Encoding;
  
  #limit_conn per_ip 1;				Чтобы какой-то клиент не вздумал положить сервер большим количество параллельных запросов
  limit_req zone=one_per_sec burst=5;		Указываем размер буффера. Первый запрос обработался сразу, а остальные запросы будут ждать 1 сек
}

# GZIP Configuration
gzip on;					В контексте сервера
gzip_min_length 100;				Минимальный размер для сжатия. Т.е. любой файл >=100 байт будет сжиматься 
gzip_comp_level 3;				Насколько сильно нужно сжимать файлы. Чем больше число, тем сильнее сжатие, 
						и тем больше требуется производительности. От 2 до 4 не сильно влияет на производительность

gzip_types text/plain;
gzip_types text/css ;
gzip_types text/javascript;			Какой тип файлов нужно сжимать

gzip_disable "msie6";				Будет отключен если заголовок user_agent совпадает. Например тут MS Internet Explore.
						Этот браузер не очень хорошо обрабатывает ответы gzip

Оценка разницы размеров файлов
curl -H 'Accept Encoding: gzip, deflate' http://46.101.19.11/wp-content/themes/twentyfifteen/styles.css > stylesheet_compressed.css
curl http://46.101.19.11/wp-content/themes/twentyfifteen/styles.css > stylesheet_uncompressed.css

=================================================================FastCgi Cache======================================================================
!!! Эти три строки должны быть определены в контексте http, а не server

Указываем где будут храниться файлы кэша. Папка /tmp очищается после перезапуска сервера. Уровень подпапок. Название микрокэша и сколько он будет оставаться актуальным :10 минут. Сколько места отведется под кэш (! она равняется количеству используемой оперативной памяти, а не размеру дискового пространства.
fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=microcache:10m max_size=500m;

В каком формате храним кэш
fastcgi_cache_key "$scheme$request_method$host$request_uri";

Добавляем хэдэр в ответ, например для curl
add_header microcache-status $upstream_cache_status; 
***HIT - кэшированный ответ. BYPASS - ответ на этот запрос никогда не кэшируется. MISS - кэш не акутален

# Default cache for everything
set #no_cache 0;					Локальная переменная

# Bypass cache for POST requests
if ($request_method = POST) { set $no_cache 1; }	Любая форма отправки данных не кэшируется	

# Bypass cache for URL with query string
if ($query_string != "") { set $no_cache 1; }		Если присутствует строка запроса, то она не кэшируется

# Don't cache the following URLs
if ($request_uri ~* "/wp-admin") { set $no_cache 1; }	Кэшировать админку вордпресса никогда не нужно кэшировать


location ~ \.php$ {
  include fastcgi_params;
  include fastcgi_conf;
  
  fastcgi_cache microcache;
  fastcgi_cach_valid 200 60m;				Любой запрос с кодом 200 должен быть кэширован в течение 60 минут
  
  fastcgi_cache_bypass $no_cache;			Эти две директивы определяют: будет ли запрос кэширован
  fastcgi_no_cache $no_cache;
  
  fastcgi_pass 127.0.0.1:9000;
}

======================================================================Limits======================================================================
# Limit concurrency
#limit_conn_zone $server_name zone=per_vhost:5m;		Ограничение параллельных соединений в блоке сервера или на vhost
#limit_conn_zone $binary_remote_addr zone=per_ip:5m;		Ограничение параллельных запросов относительно ip-адреса
limit_req_zone $binary_remote_addr zone=one_per_sec:5m rate=1r/s;	Клиенту разрешено выполнять нек. кол-во запросов. 
									На практике 1r/s очень низкое огразничение

Например, чтобы ограничить количество запросов на статические файлы, мы перейдем в контекст со статическими файлами, где исп. кэширование

===============================================================Video Streaming===================================================================

--with-http_mp4_module

location ~ \.mp4$ {
  root /sites/downloads/;
  mp4;
  mp4_buffer_size 4M;					Сколько памяти выделить для обработки заголовкой запросов.
  mp4_max_buffer_size 10M;				Если будет больше 10, то будет ошибка 500
  
  auth_basic "Restricted Content";
  auth_basic_user_file /etc/nginx/.htpassw;
}

===============================================================SSL===================================================================

mkdir /etc/nginx/ssl

Создадим ключ и сертификат
sudo openssl req -x509 -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt (Ubuntu 14.04)

listen 443 ssl;						Чтобы сервре работал исключительно на https, стоит удалить listen 80

ssl_certificate /etc/nginx/ssl/nginx.crt
ssl_certificate_key /etc/nginx/ssl/nginx.key

===============================================================Authentication===================================================================

sudo apt-get install apache2-utils
sudo htpasswd -c /etc/nginx/.htpassw stackacademy

Потребуем аутентификации на странице с mp4

===============================================================Security Upgrade===================================================================

./configure --without-http_autoindex_module		Удаляем неиспользуемые модули
server_tokens off;					Отключаем отображение версии nginx (вводим эту строку в конце контекста http)
***Обязательно нужно ограничивать размер буффера
if ($http_user_agent ~* badbot) {			Заблокировать user agent в контексте server
  return 403;
}
***Желательно установить X-Frame-Origin

============================================================Let's Encrypt && CertBot================================================================

Переходим в CertBot https://certbot.eff.org/
Стоит добавить server_name ____; в контекст server.
certbot --nginx

Автоматизация обновления сертификатов
certbot renew (--dry-run - флаг для принудительного обновления сертификатов)
crontab -e    (в нем мы можем прописать @daily certbot renew)

============================================================LoadBalancer================================================================
Создаем статический сервер https://gist.github.com/willurd/5720255

http {
  upstream php_servers {
    #ip_hash;						Запускается с одного сервера, но при его падении, переключается на следующий
    #least_conn;					Если один сервер выполняет какой-то процесс, то ответы будут только от следующих серверов
    server localhost:10001;
    server localhost:10001;
    server localhost:10001;
  }

  server {						По дефолту будет localhost
    listen 8888;
    
    location / {
      proxy_pass http://php_servers;
    }
  }
}

while sleep 1; do curl http://localhost:8888; done







