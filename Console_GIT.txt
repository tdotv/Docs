	--------------------------------------------------ЛОКАЛЬНЫЙ----------------------------------------------------------

git config --global (locale) user.name "..."
git config --global (locale) user.email ...
mkdir git				// Создание каталога (папки) с именем git
cd git					// Вход в каталог с именем git
ls -la					// Отображение всех файлов и папок 
git init				// Создание репозитория
git status				// Статус 0_0

!!!Разработка -> Поле staging (индекс) -> Commit

git add app.py				// Добавить файл в индекс
git commit -m "Init commit"		// Коммитим из staging

git log					// Отображение коммитов в истории
git show ...				// В зависимости от аргумента функции меняет свое поведение
git log -p				// Краткое описание коммитов

:x					// Выход с сохранением	
:q					// Выход с учетом того, что нет изменений
git restore app.py			// Возвращение к предыдущей версии файла
git restore --staged app.py		// Возвращение к предыдущей версии файла из индекса
git diff				// Отображение изменений в файле
git diff --staged			// Отображение изменений непосредственно в индексе
git mv app.py application.py		// (move) Новое имя для файла
git mv app.py /resources/application.py	// Перенос в другой каталог + переименование
git rm					// (remove)

git reset HEAD -- file21.c		// Приведет индекс в соответствии с поледней версией
git checkout -- file21.c		// Приведет рабочую директорию в соответствие с версией

.gitignore
__pycache__/				// Игнор целой папки с таким именем
*.py[cod]				// Игнор всех файлов с расширением .pyc, .pyo, .pyd
resources/products.json			// Игнор файла внутри каталога

	--------------------------------------------------ВЕТКИ----------------------------------------------

git branch new-api				// Создание новой ветки с именем new-api в текущей версии
git branch second-api 2b504bee			// Создание новой ветки с именем second-api в точке версии 2b504beе
git checkout new-api				// Как бы переключение с ветки master на new-api (также выполняет функцию восстановления)
						// При коммите мастер останется на №1 версии, а new-api будет с №2 версией
git switch new-api				// Переключение на другую ветку с именем new-api

git merge new-api				// Слияние ветки new-api в мастер (должен находиться в мастере)
git branch -a					// Показывает какие есть ветки
git branch -v					// Информация по коммитам на ветке (ahead - еще не запушенные коммиты
										    behind - коммиты, которые есть на сервере, но не pullенные)
git branch -d bugfix				// Удаляем ветку с именем bugfix
git checkout -b dev				// Создание ветки и перенос HEAD на нее (на текущем коммите)
git push -u original <local-branch>		// Отправляем локальную ветку на сервер FOR THE FIRST TIME
git push origin <local-branch>
git checkout --track origin/<base-branch>	// Создание новой ветки, которая отслеживает удаленную ветку 'origin/<base-branch>'

!!!Если правки ошибочны git checkout main.java -> вернется на пред версию (лучше пользоваться командой restore)

	------------------------------------------------ПУБЛИЧНЫЙ--------------------------------------------

git remote add origin ...		// Добавляем вместо ... ссылку с гитхаба или гитлаба (origin это сервер)
git remote -v				// Просмотреть все существующие репозитории
git push origin master			// Отправляем на сервер (есть два мода: для чтения и для пуша)
git pull origin master			// Берет изменения из сервера
					// В настройках гитхаба можно поставить правила взаимодействия с веткой
git tag v1				// Легковесный тег (просто указатель)
git tag -a R2020.4 -m "Release 2020.4"	// Аннотированный тег (полноценный объект)
git tag					// Показывает какие есть теги
git push origin v1
git push --tags				// Все теги отправит на сервер
