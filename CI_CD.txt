								Jenkins
===== Администрирование =====
cd /usr/share/jenkins/			
ls /usr/share/jenkins/				Смотрим .war файл с текущей версией
sudo mv jenkins.war jenkins2.440.1.war
sudo wget ***новая версия jenkins		 Скачиваем новую версию
Чтобы поставить старую версию, нужно просто переименовать обратно в jenkins.war

===== Plugins =====
/var/lib/jenkins/plugins
Credentials
Git?
Publish Over SSH

Для создания Node:
SSH Build Agents 
SSH Agent

===== Jobs =====
/var/lib/jenkins/workspaces
В настройках job обязательно поставить настройку discard old builds (5) MARK

===== Slave | Node =====
Сразу на slave машине нужно установить:

sudo apt-get update
sudo apt install apt-transport-https
sudo apt-get install openssh-server
sudo apt install ssh
sudo apt-get install openjdk-11-jre
ls /usr/lib/jvm
sudo apt install default-jre

Далее делаем:
mkdir ~/.ssh
ssh-keygen -t rsa -C "The access key for Jenkins slaves"
ОБЯЗАТЕЛЬНО!!! Назначить Passphrase на этом шаге (желательно сделать разные Passphrase для разных нод)!
cat id_rsa.pub > ~/.ssh/authorized_keys
cd ~/.ssh
cat id_rsa и копируем ключ.

Дополнительно, после ввода Jenkins username, сразу внизу добавил галку Treat username as secret. Также не забываем про ввод Passphrase.

Обязательно указываем несколько labels, например для первой ноды: ubuntu ubuntu-ansible ubuntu18
Use this node as much as possible
Launch via SSH	--->	Host: ***   ---> Credentials: SSH Username with private key	---> username: ubuntu	---> private key: RSA PRIVATE KEY
---> ID && Description: ssh-key	--->	Host Key Verification: Manually trusted key

Restrict where the project can be run	MARK


						Ansible AWX - система управления конфигурациями
===== Установка =====
pip3 install ansible
git clone https://github.com/ansible/awx
nano inventory ---> раскомментировать project_data_dir=/var/lib/awx/projects
ansible-playbook install.yml -i inventory
ip a ---> go to ip address

===== Подключение проекта. Настройка и запуск. =====
		===== Manual =====
Создаем организацию - она будет группировать проекты HOME
Создаем проект - SCM Type обычно выбирают либо Manual, либо Git. Name: Create File
Manual - те playbooks, которые расположены на самом сервере AWX. /var/lib/awx/projects

Inventories - то место, где указываем хосты 
Name: home-inventory
---> Hosts ---> Add ---> HostName: client1; Organization: HOME
variables
---
ansible_host: ip-адрес клиента

Credentials - чтобы работать с хостом, нужно указать credentials
Name: client1	Organization: HOME	
CredentialType (тип данных): Machine	 Username: root		Password: *********

Можно нажать на галочку рядом с хостом, чтобы запустить команду. Например: ping; Machine Credential: client1	---> Launch
Таким образом подключается проект, теперь нужно подключить playbook

Templates ---> Add ---> 
Name: CreateFile; JobType: Run; Inventory: home-inventory; Project: Create File; Playbook: create-file.yml;
Credentials: client1; ---> Save

		===== Git =====
Credentials ---> Name: GitLab; Organization: Home; Type: Source Control: Username: tdotv, Password: *****
Projects ---> Name: test-survey; Organization: Home; Type: Git; SCM URL: https url link (только dns поменять на ip-адрес); Credential: GitLab
+ поставить галочку на Update Revision On Launch
Inventory ---> Name: Dynamic; Organization: Home; +Hosts ---> Name: dynamicHost; Variables: ansible_host:	Сохраняем
Template ---> Name: test-survey; Job: Run; Inventory: Dynamic; Project: test-survey; Playbook: update-install-user.yml; Credentials: client1;

Add Survey ---> Prompt: Install Packages; Answer Variable Name: packages (добавляем переменную с ответом, например из файла); Answer Type: Multiple
Multiple Choice: 
tree
vim
htop
nmon

		Prompt: Hostname; Answer Variable Name: hostname; Answer Type: Text
Default Asnwer: testhost;
		Prompt: New User; Answer: new_user; Type: Text
Default: user1;
		Prompt: User Password; Answer: user_pw; Type: Password
Default: password;
		Prompt: Host IP; Answer: ansible_host; Type: Text
Default: 192.168.178.xxx;
											---> Save
